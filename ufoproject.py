# -*- coding: utf-8 -*-
"""UFOproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQTWD7P-rv37pBAEieHFF5rAt1TIzRtA
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d NUFORC/ufo-sightings

!unzip ufo-sightings.zip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("scrubbed.csv")

df.head()

df.columns

df.shape

df.columns = df.columns.str.strip()

df.columns

"""**Showing missing values**"""

sns.heatmap(df.isnull(), yticklabels= False, cbar = True, cmap = 'viridis')

print(df["latitude"].dtype)
print(df["longitude"].dtype)

# Replace non-numeric values with NaN
df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')

# Drop rows where 'latitude' is NaN (or any other undesired values)
df = df.dropna(subset=['latitude'])

# Convert the 'latitude' column to float
df['latitude'] = df['latitude'].astype(float)

"""Identify Problematic Values:

> Check for values in the 'latitude' column that are not numeric and might be causing the error.

**IDENTIFYING THE LOCATIONS**


> *Scatter Plot Of Latitude vs Longitude*
"""

plt.figure(figsize=(12,6))
plt.scatter(df["longitude"],df["latitude"],  alpha=0.5, c='blue', edgecolors='none', s=30)

# Customize the plot
plt.title('UFO Sightings',fontsize=20)
plt.xlabel('X-axis label')
plt.ylabel('Y-axis label')
plt.grid(True)
plt.show()

df['datetime'] = df['datetime'].str.replace('24:00', '0:00') #converts 24:00 to 0:00
df['month'] = pd.DatetimeIndex(df['datetime']).month #creates column 'month' stripping the year from datetime_zero
df['year'] = pd.DatetimeIndex(df['datetime']).year #creates column 'year' stripping the year from datetime_zero
df['day'] = pd.DatetimeIndex(df['datetime']).day #creates column 'day' stripping the year from datetime_zero
df['hour'] = pd.DatetimeIndex(df['datetime']).hour #creates column 'hour' stripping the year from datetime_zero
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')

df.head()

df.info()

years_data = df['year'].value_counts()
years_index = years_data.index
years_values = years_data.values

plt.figure(figsize=(12,6))
plt.xticks(rotation = 60)
plt.title('UFO Sightings since 1943', fontsize=18)
plt.xlabel("Year", fontsize=14)
plt.ylabel("Number of reports", fontsize=14)
years_plot = sns.lineplot(x=years_index[:70], y=years_values[:70], palette="GnBu", legend=False)

plt.show()

"""### we see a large increase of sightings at the beginning of the 90's"""

def month_conversion(m):
    if m in range(3,6):
        return "Spring"
    if m in range(6,9):
        return "Summer"
    if m in range(9,12):
        return "Autumn"
    if m == 12 or m == 1 or m == 2:
        return "Winter"

season_order = ["Spring", "Summer", "Autumn", "Winter"]

df["Season"] = df['month'].apply(month_conversion)
season_stat = df["Season"].value_counts()
season_index = season_stat.index
season_value = season_stat.values
plt.figure(figsize=(15,8))
plt.title('UFO Sightings by Season', fontsize=18)
plt.xlabel("Season",fontsize=14)
plt.ylabel("Number of reports", fontsize=14)
season_plot = sns.barplot(x=season_index[:60], y=season_value[:60], hue=season_index[:60], palette="colorblind", alpha=0.3, order=season_order, legend=False)

"""### Summer season had more UFO sightings

### Top 5 Cities
"""

df.head()

cities=df[["city","datetime"]].groupby("city").count().rename(columns={"datetime":"count"}).sort_values("count",ascending=False).head()

cities.plot.bar(title="Top 5 countries")

df.loc[:,"weekday"]=df["datetime"].dt.dayofweek

df.head()

weekday_group=df[["weekday","datetime"]].groupby("weekday").count().rename(columns={"datetime":"count"})

weekday_group

colors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan', 'pink']
sns.barplot(x=weekday_group.index,y=weekday_group["count"],data=weekday_group, palette=colors)
plt.title('Count of UFO by day(Mon to Sun)')
plt.xlabel('Weekday')
plt.ylabel('Count')

# Show the plot
plt.show()

